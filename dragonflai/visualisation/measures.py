from matplotlib import pyplot as plt
import numpy as np
import torch
from torchmetrics import Accuracy


def confusion_mat(ClassiNeuralNetwork, data, criterion, classes):
        """Computes and visualizes a confusion matrix to evaluate the performance of a classification model.

        Args:
            data (Pytorch DataLoader object): Dataset used for evaluating the model's performance
            criterion (torch.nn): Criterion used during training for loss calculation (default = MSELoss() - see: https://pytorch.org/docs/stable/nn.html#loss-functions) 

        Returns:
                y_pred (array of shape (data_number, target_number)): Predicted labels generated by the model for each sample in the input dataset.
                y_true (array of shape (data_number, target_number)): True labels corresponding to each sample in the input dataset.
        """
        from sklearn.metrics import confusion_matrix
        import seaborn as sn
        import pandas as pd

        _, output = ClassiNeuralNetwork.predict(data,crit=criterion)

        y_pred = []
        y_true = []
        for i in range(len(output[0])):
            y_true.append(output[0][i])
            y_pred.append(output[1][i].argmax())

        # Build confusion matrix
        cf_matrix = confusion_matrix(y_true, y_pred)
        normalized_cf_matrix = cf_matrix / np.sum(cf_matrix)
        df_cm = pd.DataFrame(normalized_cf_matrix, 
                                       index=classes, 
                                       columns=classes)
        plt.figure(figsize = (12,7))
        sn.heatmap(df_cm, annot=True)
        plt.savefig('output.png')
        plt.show()
        
        acc = Accuracy(task="binary", num_classes=len(classes))
        return acc(torch.tensor(y_pred), torch.tensor(y_true))
